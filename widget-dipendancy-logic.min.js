const PARTICIPANT_REGEX = /participants/i, observers = new Set, debounce = (e, o = 100) => { let t; return (...r) => { clearTimeout(t), t = setTimeout((() => e(...r)), o) } }, getRegiondoCatalog = e => e.querySelector("#root"), queryOptions = (e, o) => Array.from(e.querySelectorAll(o)), setButtonState = (e, o) => { e?.forEach((e => { e.disabled = !o, e.style.backgroundColor = o ? "transparent" : "grey", e.style.cursor = o ? "pointer" : "not-allowed" })) }, processAddons = e => { e.querySelectorAll(".MuiAccordionDetails-root").forEach((o => { const t = queryOptions(o, ".regiondo-option__name .regiondo-option__title"), r = t.filter((e => PARTICIPANT_REGEX.test(e.textContent))), s = t.filter((e => !PARTICIPANT_REGEX.test(e.textContent))), n = r.some((e => { const o = e.closest(".regiondo-option__name"); return o?.querySelector(".regiondo-qty__minus:not([disabled])") })); s.forEach((e => { const o = e.closest(".regiondo-option__name"), t = o?.querySelectorAll(".quantity-wrapper button"); setButtonState(t, n) })); const c = e.querySelector(".regiondo-button.regiondo-button-addtocart"); c && (c.disabled = !n) })) }, processCheckout = e => { const o = [...e.querySelectorAll(".regiondo-table")].some((e => queryOptions(e, ".regiondo-product-option-name").some((e => PARTICIPANT_REGEX.test(e.textContent))))), t = e.querySelector(".regiondo-button.regiondo-button-checkout"); t && (t.disabled = !o) }, observeCatalog = e => { const o = debounce((() => { const o = e.querySelector(".regiondo-step-variation.regiondo-step--selected"), t = e.querySelector(".regiondo-checkout.regiondo-checkout--cart"); o && processAddons(e), t && processCheckout(e) }), 150), t = new MutationObserver(o); t.observe(e, { childList: !0, subtree: !0, attributes: !0, attributeFilter: ["class"] }), observers.add(t) }, setupShadowObservers = () => { document.querySelectorAll("button-widget").forEach((e => { if (!e.shadowRoot) return; const o = e.shadowRoot.querySelector("#root"); o && observeCatalog(o) })) }, cleanupObservers = () => { observers.forEach((e => e.disconnect())), observers.clear() }, waitForWidgets = () => { const e = document.querySelectorAll("button-widget"), o = [...e].every((e => e.shadowRoot)); e.length && o ? (observers.forEach((e => e.disconnect())), observers.clear(), document.querySelectorAll("button-widget").forEach((e => { if (!e.shadowRoot) return; const o = e.shadowRoot.querySelector("#root"); o && observeCatalog(o) }))) : setTimeout(waitForWidgets, 100) }; waitForWidgets();